# -*- coding: utf-8 -*-
"""age_gender_labels_wiki.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pSLSxO7E334tKYAEq9K9a-nN3rZZbZVp
"""

# Commented out IPython magic to ensure Python compatibility.
import scipy.io
import numpy as np
import pandas as pd
from datetime import datetime, timedelta

import matplotlib.pyplot as plt
# %matplotlib inline

from keras.models import load_model
import cv2
from glob import glob
import os

mat = scipy.io.loadmat('drive/My Drive/Tibame_AIoT_Project/Datasets/資料集_IMDB-Wiki/wiki_crop/wiki.mat')
columns = ["dob", "photo_taken", "full_path", "gender", "name", "face_location", "face_score", "second_face_score"]
instances = mat['wiki'][0][0][0].shape[1]
df = pd.DataFrame(index = range(0,instances), columns = columns)
mat

instances = mat['wiki'][0][0][0].shape[1]
 
columns = ["dob", "photo_taken", "full_path", "gender", "name", "face_location", "face_score", "second_face_score"]
 
import pandas as pd
df = pd.DataFrame(index = range(0,instances), columns = columns)
 
for i in mat:
    if i == "wiki":
        current_array = mat[i][0][0]
for j in range(len(current_array)):
    df[columns[j]] = pd.DataFrame(current_array[j][0])
df

for i in range(len(df['full_path'])):
    df['full_path'][i] = df['full_path'][i][0]
df

from datetime import datetime, timedelta
def datenum_to_datetime(datenum):
    days = datenum % 1
    hours = days % 1 * 24
    minutes = hours % 1 * 60
    seconds = minutes % 1 * 60
    exact_date = datetime.fromordinal(int(datenum)) \
    + timedelta(days=int(days)) + timedelta(hours=int(hours)) \
    + timedelta(minutes=int(minutes)) + timedelta(seconds=round(seconds)) \
    - timedelta(days=366)
    
    return exact_date.year
 
df['date_of_birth'] = df['dob'].apply(datenum_to_datetime)
df['age'] = df['photo_taken'] - df['date_of_birth']
df

#remove pictures does not include face
df = df[df['face_score'] != -np.inf]
 
#some pictures include more than one face, remove them
df = df[df['second_face_score'].isna()]
 
#check threshold
df = df[df['face_score'] >= 3]
 
#some records do not have a gender information
df = df[~df['gender'].isna()]
 
df = df.drop(columns = ['dob', 'photo_taken', 'name','face_score','second_face_score','date_of_birth','face_location'])
df

# gender = ['female', 'male']
# df['gender'] = df['gender'].astype('int')
# df['gender'] = df['gender'].apply(lambda x: gender[x])
# df

histogram_age = df['age'].hist(bins=df['age'].nunique())

histogram_gender = df['gender'].hist(bins=df['gender'].nunique())

df.to_csv('drive/My Drive/Tibame_AIoT_Project/Datasets/資料集_IMDB-Wiki/wiki_crop/wiki_mat.csv', 
          encoding="utf-8", index=False)

